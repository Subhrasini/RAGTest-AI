package com.fortify.fod.ui.test.regression;

import com.fortify.fod.ui.test.FodBaseTest;
import com.fortify.fod.ui.test.actions.LogInActions;
import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;
import io.qameta.allure.Description;
import io.qameta.allure.Owner;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.testng.annotations.Test;
import utils.MaxRetryCount;
import utils.RetryAnalyzer;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@Owner("kbadia@opentext.com")
@Slf4j
public class ImportCustomVulnerabilityTest extends FodBaseTest {

    String vulnerabilityId = generateRandomVulnerabilityId();
    String handlingTestMessage = "Test Message for '-)!(~' Handling";
    String validationTestMessage = "Test Message for '-)!(~' Validation";

    @MaxRetryCount(3)
    @Severity(SeverityLevel.NORMAL)
    @Description("Verify download/Import customvuln.csv and VulnerabilityLibrary.csv file " +
            "from Vulnerability Definitions page")
    @Test(groups = {"regression"})
    public void validateImportCustomVulnerabilityTest() {
        var vulnerabilityDefinitionsPage = LogInActions.adminLogIn().adminTopNavbar
                .openConfiguration()
                .openVulnerabilityDefinitions();
        var customVulnsFile = vulnerabilityDefinitionsPage.downloadCustomVulnerabilities();
        assertThat(customVulnsFile.getName())
                .as("Name should be customvulns")
                .isEqualTo("customvulns.csv");
        updateCSV(customVulnsFile.getAbsolutePath(), vulnerabilityId, 3, "ID");
        vulnerabilityDefinitionsPage.importCustomVulnerability(customVulnsFile.getAbsolutePath());
        assertThat(vulnerabilityDefinitionsPage
                .successImportInfoblock
                .isDisplayed())
                .as("Message for successful import should be displayed")
                .isTrue();
        var libraryDataFile = vulnerabilityDefinitionsPage.downloadVulnerabilityLibraryData();
        assertThat(libraryDataFile.getName())
                .as("Name should be VulnerabilityLibrary.csv")
                .isEqualTo("VulnerabilityLibrary.csv");
        updateCSV(libraryDataFile.getAbsolutePath(), vulnerabilityId, 1, "VulnId");
        vulnerabilityDefinitionsPage.importVulnerabilityValidation(libraryDataFile.getAbsolutePath());
        assertThat(vulnerabilityDefinitionsPage
                .successImportInfoblock
                .isDisplayed())
                .as("Message for successful import should be displayed")
                .isTrue();
        var vulnerabilityLibraryPage = vulnerabilityDefinitionsPage
                .adminTopNavbar
                .openVulnerabilityLibrary();
        vulnerabilityLibraryPage.ruleTypeDropdown.selectOptionByText("Mobile");
        vulnerabilityLibraryPage.searchBox.searchFor(vulnerabilityId);
        vulnerabilityLibraryPage.getTable().waitForRecordsCount(1, 1);
        var customVulnerability = vulnerabilityLibraryPage.getAll().get(0);
        assertThat(customVulnerability.getId())
                .as("Custom vulnerability ID should match expected")
                .isEqualTo(vulnerabilityId);
        vulnerabilityLibraryPage.tabs.openTabByName("Validation");
        var resultValidation = vulnerabilityLibraryPage.getActiveText();
        assertThat(resultValidation)
                .as("Entered text should be visible on handling tab")
                .isEqualTo(validationTestMessage);
        vulnerabilityLibraryPage.tabs.openTabByName("Handling");
        var resultHandling = vulnerabilityLibraryPage.getActiveText();
        assertThat(resultHandling)
                .as("Entered text should be visible on handling tab")
                .isEqualTo(handlingTestMessage);
    }

    @SneakyThrows
    public static void updateCSV(String fileToUpdate, String replace, int rowsToUpdate, String header) {
        File inputFile = new File(fileToUpdate);
        CSVReader reader = new CSVReader(new FileReader(inputFile));
        List<String[]> csvBody = reader.readAll();
        if (header.equals("VulnId")) {
            csvBody.get(0)[0] = " VulnId";
        } else {
            csvBody.get(0)[0] = " ID";
        }
        for (int i = 1; i <= rowsToUpdate; i++) {
            csvBody.get(i)[0] = replace;
        }
        reader.close();
        CSVWriter writer = new CSVWriter(new FileWriter(inputFile));
        writer.writeAll(csvBody);
        writer.flush();
        writer.close();
    }

    public static String generateRandomVulnerabilityId() {
        int number = (int) (Math.random() * 9000) + 1000;
        String id = Integer.toString(number);
        return "M" + id;
    }
}
