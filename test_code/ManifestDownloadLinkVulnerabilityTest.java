package com.fortify.fod.ui.test.regression;

import com.codeborne.selenide.SelenideElement;
import com.fortify.common.utils.BrowserUtil;
import com.fortify.common.utils.WaitUtil;
import com.fortify.fod.common.custom_types.FodCustomTypes;
import com.fortify.fod.common.entities.ApplicationDTO;
import com.fortify.fod.common.entities.EntitlementDTO;
import com.fortify.fod.common.entities.StaticScanDTO;
import com.fortify.fod.common.entities.TenantDTO;
import com.fortify.fod.common.utils.sql.FodSQLUtil;
import com.fortify.fod.ui.test.FodBaseTest;
import com.fortify.fod.ui.test.actions.ApplicationActions;
import com.fortify.fod.ui.test.actions.LogInActions;
import com.fortify.fod.ui.test.actions.StaticScanActions;
import com.fortify.fod.ui.test.actions.TenantActions;
import io.qameta.allure.Description;
import io.qameta.allure.Owner;
import lombok.extern.slf4j.Slf4j;
import org.testng.annotations.Test;
import utils.FodBacklogItem;
import utils.MaxRetryCount;
import utils.RetryAnalyzer;

import java.io.File;
import java.io.IOException;
import java.time.Duration;
import java.util.function.Supplier;

import static com.codeborne.selenide.Selenide.*;
import static org.assertj.core.api.Assertions.assertThat;

@Owner("tmagill@opentext.com")
@FodBacklogItem("346007")
@Slf4j
public class ManifestDownloadLinkVulnerabilityTest extends FodBaseTest {
    final int manifestFileSize = 894;
    ApplicationDTO webAppDTO;
    TenantDTO tenantDTO;
    StaticScanDTO staticScanDTO;

    @MaxRetryCount(1)
    @Description("Admin user should be able to create tenant on admin site, AUTO-TAM should create required applications and releases")
    @Test(groups = {"regression"})
    public void prepareTestData() {
        tenantDTO = TenantDTO.createDefaultInstance();
        tenantDTO.setEntitlementDTO(EntitlementDTO.createDefaultInstance());
        TenantActions.createTenant(tenantDTO, true, false);
        BrowserUtil.clearCookiesLogOff();

        LogInActions.tamUserLogin(tenantDTO);
        webAppDTO = ApplicationDTO.createDefaultInstance();
        ApplicationActions.createApplication(webAppDTO, tenantDTO, false);

        staticScanDTO = StaticScanDTO.createDefaultInstance();
        staticScanDTO.setLanguageLevel("1.8");
        staticScanDTO.setFileToUpload("payloads/fod/static.java.zip");
        StaticScanActions.createStaticScan(staticScanDTO, webAppDTO, FodCustomTypes.SetupScanPageStatus.InProgress);
        BrowserUtil.clearCookiesLogOff();
        StaticScanActions.completeStaticScan(webAppDTO, true);
    }

    @MaxRetryCount(1)
    @Description("TAM should be able to download manifest and then verify link to manifest on different tenant is not accessible")
    @Test(groups = {"regression"}, dependsOnMethods = {"prepareTestData"})
    public void vulnerabilityDownloadManifestLinkTest() throws IOException {
        File manifest;
        var sql = new FodSQLUtil();
        var downloadManifest = LogInActions.tamUserLogin(tenantDTO)
                .tenantTopNavbar.openApplications()
                .openYourApplications()
                .getAppByName(webAppDTO.getApplicationName())
                .openYourScans()
                .getScanByType(FodCustomTypes.ScanType.Static)
                .openDropdown();

        SelenideElement element = $x("//*[text()[contains(.,'Download Manifest')]]");
        String manifestLink = element.hover().getAttribute("href");

        manifest = downloadManifest.downloadManifest();
        assertThat(manifest).as("File should be downloaded and be " + manifestFileSize + " bytes.").hasSize(manifestFileSize);

        var tenantName = tenantDTO.getTenantName();

        log.info("Query for TenantID");
        var tenantIDQuery = "select TenantID from TenantMaster where TenantName = " + "'" + tenantName + "'" + ";";
        String tenantIDResult = sql.getStringValueFromDB(tenantIDQuery);

        log.info("Query for Static scan that is not on current tenant");
        var staticScanQuery = "select count(*) from ProjectVersionScan where ScanTypeId = 1 and TenantId != " + "'" + tenantIDResult + "'" + ";";
        Supplier<Boolean> sup = () -> Integer.parseInt(sql.getStringValueFromDB(staticScanQuery)) > 0;
        WaitUtil.waitForTrue(sup, Duration.ofSeconds(600), false);

        log.info("Get the latest static scan from another tenant");
        var scanIDQuery = "select top 1 ScanID from ProjectVersionScan where ScanTypeId = 1 and TenantId != " + "'" + tenantIDResult + "'" + " order by ScanId desc;";

        String scanIDResult = sql.getStringValueFromDB(scanIDQuery);
        sql.close();
        String vulnerableManifestLink = manifestLink.replaceAll("(/|(?!^)\\G)\\d(\\d*(?:/))", "$1" + scanIDResult + "/");
        assertThat(vulnerableManifestLink).as("Validate links are different").isNotEqualTo(manifestLink);
        open(vulnerableManifestLink);
        assertThat($("h1").text().trim())
                .as("Link should navigate to Download Error")
                .isEqualTo("Download Error");
        assertThat($("p").innerText().trim())
                .as("Download Error should be Access Denied")
                .isEqualTo("Access Denied");
    }
}