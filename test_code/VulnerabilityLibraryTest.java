package com.fortify.fod.ui.test.regression;

import com.codeborne.selenide.CollectionCondition;
import com.codeborne.selenide.Selenide;
import com.fortify.common.utils.BrowserUtil;
import com.fortify.fod.common.config.FodConfig;
import com.fortify.fod.common.custom_types.FodCustomTypes;
import com.fortify.fod.common.elements.Spinner;
import com.fortify.fod.common.entities.ApplicationDTO;
import com.fortify.fod.common.entities.DynamicScanDTO;
import com.fortify.fod.common.entities.TenantDTO;
import com.fortify.fod.ui.pages.admin.user_menu.vulnerability_library.VulnerabilityCell;
import com.fortify.fod.ui.test.FodBaseTest;
import com.fortify.fod.ui.test.actions.ApplicationActions;
import com.fortify.fod.ui.test.actions.DynamicScanActions;
import com.fortify.fod.ui.test.actions.IssuesActions;
import com.fortify.fod.ui.test.actions.LogInActions;
import io.qameta.allure.Description;
import io.qameta.allure.Owner;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import lombok.extern.slf4j.Slf4j;
import org.testng.annotations.Test;
import utils.FodBacklogItem;
import utils.MaxRetryCount;
import utils.RetryAnalyzer;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import static org.assertj.core.api.Assertions.assertThat;

@Owner("oradchenko@opentext.com")
@Slf4j
public class VulnerabilityLibraryTest extends FodBaseTest {
    TenantDTO tenantDTO;
    ApplicationDTO applicationDTO;
    DynamicScanDTO dynamicScanDTO;
    String vulnerabilityId = "10034";
    String handlingTestMessage = "Test Message for '-)!(~' Handling";
    String validationTestMessage = "Test Message for '-)!(~' Validation";

    @MaxRetryCount(3)
    @Severity(SeverityLevel.NORMAL)
    @Description("Create application and dynamic scan")
    @Test(groups = {"regression"})
    public void prepareTestData() {
        tenantDTO = defaultTenantDTO;
        applicationDTO = ApplicationDTO.createDefaultInstance();
        ApplicationActions.createApplication(applicationDTO, tenantDTO, true);
        dynamicScanDTO = DynamicScanDTO.createDefaultInstance();
        DynamicScanActions.createDynamicScan(dynamicScanDTO, applicationDTO, FodCustomTypes.SetupScanPageStatus.InProgress);
    }

    @MaxRetryCount(3)
    @Severity(SeverityLevel.NORMAL)
    @Description("TAM and Admin users should be able to search, view issues, switch tabs, Admin user should be able to edit Handling and Validation")
    @Test(groups = {"regression"}, dependsOnMethods = {"prepareTestData"})
    public void vulnerabilityLibraryPageTest() {
        var vulnerabilityPage = LogInActions
                .adminUserLogIn("AUTO-TAM", FodConfig.ADMIN_PASSWORD)
                .adminTopNavbar.openVulnerabilityLibrary();

        assertThat(vulnerabilityPage.titleElement.getText()).as("Title should be Vulnerability Library")
                .isEqualTo("Vulnerability Library");

        vulnerabilityPage.getTable().rows.should(CollectionCondition.sizeGreaterThan(0)).get(0).click();

        vulnerabilityPage.tabs.openTabByName("Validation");
        assertThat(vulnerabilityPage.editButton.isDisplayed())
                .as("Edit button should not be displayed for TAM on Validation tab").isFalse();

        vulnerabilityPage.tabs.openTabByName("Handling");
        assertThat(vulnerabilityPage.editButton.isDisplayed())
                .as("Edit button should not be displayed for TAM on Handling tab").isFalse();

        BrowserUtil.clearCookiesLogOff();
        vulnerabilityPage = LogInActions.adminLogIn().adminTopNavbar.openVulnerabilityLibrary();

        assertThat(vulnerabilityPage.titleElement.getText()).as("Title should be Vulnerability Library")
                .isEqualTo("Vulnerability Library");

        var options = vulnerabilityPage.ruleTypeDropdown.getOptionsValues();

        assertThat(options).as("There should be 3 options").hasSize(3).as("Dropdown should contain Static")
                .contains("Static").as("Dropdown should contain Dynamic").contains("Dynamic")
                .as("Dropdown should contain Mobile").contains("Mobile");

        vulnerabilityPage.ruleTypeDropdown.selectOptionByText("Static");
        var searchItems = new ArrayList<String>();
        for (int i = 0; i < 3; i++) {
            searchItems.add(vulnerabilityPage.getTable().getCellByIndexes(i, 0).text());
        }

        vulnerabilityPage.searchBox.searchFor(searchItems.get(0));
        var resultId = vulnerabilityPage.getAll().get(0).getId();
        assertThat(resultId).as("Assert that vulnerability can be found by ID").isEqualTo(searchItems.get(0));

        vulnerabilityPage.searchBox.searchFor(searchItems.get(1));
        var resultCategory = vulnerabilityPage.getAll().stream().map(VulnerabilityCell::getCategory)
                .collect(Collectors.toList());
        assertThat(resultCategory).as("All items should be of one category").containsOnly(searchItems.get(1))
                .as("There should be 5 entries").hasSize(5);

        vulnerabilityPage.searchBox.searchFor(searchItems.get(2));
        var resultNames = vulnerabilityPage.getAll().stream().map(VulnerabilityCell::getName)
                .collect(Collectors.toList());
        assertThat(resultNames).as("All items should be of one category").containsOnly(searchItems.get(2))
                .as("There should be 5 entries").hasSize(5);

        vulnerabilityPage.searchBox.reset();

        vulnerabilityPage.ruleTypeDropdown.selectOptionByText("Dynamic");
        new Spinner().waitTillLoading();

        var dynamicIds = vulnerabilityPage.getAll().stream()
                .map(VulnerabilityCell::getId).collect(Collectors.toList());

        assertThat(dynamicIds).as("There should be at least 1 dynamic issue").hasSizeGreaterThan(0);

        String pattern = "\\d+";
        Pattern regexPattern = Pattern.compile(pattern);

        for (var id : dynamicIds) {
            Matcher matcher = regexPattern.matcher(id);
            assertThat(matcher.find()).as("Dynamic IDs have valid format").isTrue();
        }

        vulnerabilityPage.getAll().stream().filter(c -> c.getId().equals(vulnerabilityId))
                .collect(Collectors.toList()).get(0).click();

        for (var tab : List.of(new String[]{"Summary", "Recommendations", "Implication", "Execution", "References"})) {
            vulnerabilityPage.tabs.openTabByName(tab);
            assertThat(vulnerabilityPage.getActiveText()).as("Tab contents should not be empty").isNotBlank();
        }

        var resultValidation = vulnerabilityPage.editValidation().setText(validationTestMessage)
                .pressSave().getActiveText();
        assertThat(resultValidation).as("Entered text should be visible on handling tab")
                .isEqualTo(validationTestMessage);

        var resultHandling = vulnerabilityPage.editHandling().setText(handlingTestMessage)
                .pressSave().getActiveText();
        assertThat(resultHandling).as("Entered text should be visible on handling tab")
                .isEqualTo(handlingTestMessage);
    }

    @MaxRetryCount(3)
    @Severity(SeverityLevel.NORMAL)
    @Description("Add issue, upload screenshot, verify fields")
    @Test(groups = {"regression"}, dependsOnMethods = {"vulnerabilityLibraryPageTest"})
    public void createDynamicManualIssueTest() {
        String dynamicUrlAppendString = tenantDTO.getRunTag();

        LogInActions.adminLogIn();
        IssuesActions.addManualIssueExtendedAdmin(
                FodCustomTypes.ScanType.Dynamic,
                applicationDTO.getApplicationName(),
                vulnerabilityId,
                dynamicUrlAppendString,
                null,
                true);

        IssuesActions.validateAddedManualIssue(FodCustomTypes.Severity.High);
    }

    @Severity(SeverityLevel.NORMAL)
    @Description("Complete dynamic scan, verify edited vulnerability on admin and tenant sites")
    @Test(groups = {"regression"}, dependsOnMethods = {"createDynamicManualIssueTest"})
    public void vulnerabilityLibraryManualEditValidationTest() {
        var page = LogInActions.adminLogIn().adminTopNavbar.openDynamic()
                .openDetailsFor(applicationDTO.getApplicationName()).openIssues();

        assertThat(page.getAllCount()).as("Issue count should increase by 1").isEqualTo(1);
        var issue = page.getAllIssues().get(0).openDetails();
        assertThat(issue.getVulnerabilityName()).as("Vulnerability Title should be PHP-Nuke Local File Inclusion (10034)")
                .isEqualTo("Check: PHP-Nuke Local File Inclusion (10034)");
        var httpCell = issue.openHttp();
        assertThat(httpCell.getRequest()).as("Request should be TestRequest").isEqualTo("TestRequest");
        assertThat(httpCell.getResponse()).as("Response should be TestResponse").isEqualTo("TestResponse");

        var validationCell = httpCell.openValidation();
        assertThat(validationCell.getValidationText()).as("Validation text should match expected")
                .isEqualTo(validationTestMessage);
        assertThat(validationCell.getHandlingText()).as("Handling text should match expected")
                .isEqualTo(handlingTestMessage);

        DynamicScanActions.completeDynamicScanAdmin(applicationDTO, false);
        BrowserUtil.openNewTab();
        Selenide.switchTo().window(1);
        var tenantAppIssues = LogInActions.tamUserLogin(tenantDTO).openYourApplications()
                .openDetailsFor(applicationDTO.getApplicationName()).openIssues();

        assertThat(tenantAppIssues.getAllCount()).as("Only one issue is present on tenant site").isEqualTo(1);

        var tabs = tenantAppIssues.getAllIssues().get(0).openDetails().getAllTabsNames();
        assertThat(tabs).as("Validation Tab is absent on tenant site").doesNotContain("Validation");

        Selenide.switchTo().window(0);
/*        var eventPage = new AdminTopNavbar().openEventLog();

        var logs = eventPage.findWithSearchBox("Edit Custom Vuln").getAllLogs();
        assertThat(logs).as("There should be at least 2 entries").hasSizeGreaterThan(1);*/
    }

    @MaxRetryCount(3)
    @Severity(SeverityLevel.NORMAL)
    @Description("Admin user should be able to update custom vulnerabilities, export custom vulnerabilities file, and library data file, updated vulnerability should appear in favorites")
    @Test(groups = {"regression"}, dependsOnMethods = {"vulnerabilityLibraryManualEditValidationTest"})
    public void exportAndLimitTest() {
        var definitionsPage = LogInActions.adminLogIn().adminTopNavbar.openConfiguration()
                .openVulnerabilityDefinitions();

        definitionsPage.setFavoriteVulnerabilities(vulnerabilityId);
        assertThat(definitionsPage.getFavoriteVulnerabilitiesStatusText()).as("Expecting update success")
                .isEqualTo("Favorite vulnerabilities updated.");

        assertThat(definitionsPage.getFavoriteVulnerabilities())
                .as("Favorite vulnerabilities text saved to the field.").isEqualTo(vulnerabilityId);

        var customVulnsFile = definitionsPage.downloadCustomVulnerabilities();
        assertThat(customVulnsFile.getName()).as("Name should be customvulns").isEqualTo("customvulns.csv");
        assertThat(customVulnsFile.length()).as("File should not be empty").isGreaterThan(1);
        var libraryDataFile = definitionsPage.downloadVulnerabilityLibraryData();
        assertThat(libraryDataFile.getName()).as("Name should be VulnerabilityLibrary.csv").isEqualTo("VulnerabilityLibrary.csv");
        assertThat(libraryDataFile.length()).as("File should not be empty").isGreaterThan(1);

        var vulnerabilityLibraryPage = definitionsPage.adminTopNavbar.openVulnerabilityLibrary();
        vulnerabilityLibraryPage.ruleTypeDropdown.selectOptionByText("Dynamic");
        vulnerabilityLibraryPage.limitToFavorite.click();
        vulnerabilityLibraryPage.getTable().waitForRecordsCount(1, 1);
        var customVulnerability = vulnerabilityLibraryPage.getAll().get(0);
        assertThat(customVulnerability.getId()).as("Custom vulnerability ID should match expected").isEqualTo(vulnerabilityId);
    }

    @FodBacklogItem("597032")
    @Description("Disable logs page check for admin site")
    @Test(enabled = false)
    public void tempDisableLogsCheck() {
        /*
        Uncomment rows 204-207
        */
    }
}
