package com.fortify.fod.ui.test.regression;

import com.codeborne.pdftest.PDF;
import com.codeborne.selenide.Configuration;
import com.codeborne.selenide.FileDownloadMode;
import com.fortify.common.custom_types.IssuesCounters;
import com.fortify.common.ui.config.AllureReportUtil;
import com.fortify.common.utils.BrowserUtil;
import com.fortify.fod.common.custom_types.FodCustomTypes;
import com.fortify.fod.common.entities.*;
import com.fortify.fod.ui.pages.tenant.navigation.TenantTopNavbar;
import com.fortify.fod.ui.test.FodBaseTest;
import com.fortify.fod.ui.test.actions.*;
import io.qameta.allure.Description;
import io.qameta.allure.Owner;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import utils.FodBacklogItem;
import utils.MaxRetryCount;
import utils.RetryAnalyzer;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.assertj.core.api.Assertions.assertThat;

@Owner("svpillai@opentext.com")
@FodBacklogItem("465002")
@Slf4j
public class VulnerabilityCountComparisonTest extends FodBaseTest {
    ApplicationDTO dynamicApp, mobileApp, staticApp;
    DynamicScanDTO dynamicScanDTO;
    MobileScanDTO mobileScanDTO;
    StaticScanDTO staticScanDTO;
    IssuesCounters expectedDynamicIssueCounters1 = new IssuesCounters(0, 0, 0, 1);
    IssuesCounters expectedDynamicIssueCounters2 = new IssuesCounters(0, 0, 0, 1, 1);
    IssuesCounters expectedMobileIssueCounters1 = new IssuesCounters(0, 0, 3, 4);
    IssuesCounters expectedMobileIssueCounters2 = new IssuesCounters(0, 0, 3, 4, 9);
    IssuesCounters expectedStaticIssueCounters1 = new IssuesCounters(0, 0, 0, 0);
    IssuesCounters expectedStaticIssueCounters2 = new IssuesCounters(0, 0, 0, 0, 0);
    String dynamicAndMobileAppendString;

    @BeforeClass
    public void createDynamicAndMobileAppendString() {
        dynamicAndMobileAppendString = defaultTenantDTO.getRunTag();
    }

    @MaxRetryCount(3)
    @Severity(SeverityLevel.NORMAL)
    @Description("Verify suppression,severity changes and counts in Release Issues Page/Application Overview Page for " +
            "Dynamic Scans")
    @Test(groups = {"regression", "hf"}, priority = 1)
    public void compareVulnerabilityCountOfDynamicScans() {
        dynamicApp = ApplicationDTO.createDefaultInstance();
        dynamicScanDTO = DynamicScanDTO.createDefaultInstance();
        ApplicationActions.createApplication(dynamicApp, defaultTenantDTO, true);
        DynamicScanActions.createDynamicScan(dynamicScanDTO, dynamicApp, FodCustomTypes.SetupScanPageStatus.Scheduled);
        BrowserUtil.clearCookiesLogOff();

        AllureReportUtil.info("Add 1 manual critical issue and High Issue");
        LogInActions.adminLogIn();
        IssuesActions.addManualIssueExtendedAdmin(
                FodCustomTypes.ScanType.Dynamic,
                dynamicApp.getApplicationName(),
                "22",
                dynamicAndMobileAppendString,
                FodCustomTypes.Severity.Critical,
                false);
        IssuesActions.addManualIssueExtendedAdmin(
                FodCustomTypes.ScanType.Dynamic,
                dynamicApp.getApplicationName(),
                "622",
                dynamicAndMobileAppendString,
                FodCustomTypes.Severity.High,
                false);
        DynamicScanActions.completeDynamicScanAdmin(dynamicApp, false);
        BrowserUtil.clearCookiesLogOff();

        LogInActions.tamUserLogin(defaultTenantDTO);
        var issuesPage = new TenantTopNavbar().openApplications()
                .openDetailsFor(dynamicApp.getApplicationName()).openIssues();
        issuesPage.clickCritical().openIssueByIndex(0).pressAddAuditFilter()
                .setSuppress()
                .pressCreateFilter()
                .pressClose();
        issuesPage.clickHigh().openIssueByIndex(0).pressAddAuditFilter()
                .setSeverity(FodCustomTypes.Severity.Low)
                .pressCreateFilter()
                .pressClose();
        DynamicScanActions.createDynamicScan(dynamicScanDTO, dynamicApp, FodCustomTypes.SetupScanPageStatus.Scheduled);
        BrowserUtil.clearCookiesLogOff();
        DynamicScanActions.completeDynamicScanAdmin(dynamicApp, true);
        BrowserUtil.clearCookiesLogOff();

        LogInActions.tamUserLogin(defaultTenantDTO);
        verifyIssueCountersTenantOverviewPage(dynamicApp, expectedDynamicIssueCounters1);
        verifyIssueCountersTenantIssuesPage(dynamicApp, expectedDynamicIssueCounters2);
        verifyReport(dynamicApp, "D…", expectedDynamicIssueCounters2.getSum(), "Dynamic Issue Detail");
    }

    @MaxRetryCount(3)
    @Severity(SeverityLevel.NORMAL)
    @Description("Verify suppression,severity changes and counts in Release Issues Page/Application Overview Page for " +
            "Mobile Scans")
    @Test(groups = {"regression", "hf"})
    public void compareVulnerabilityCountOfMobileScans() {
        mobileApp = ApplicationDTO.createDefaultMobileInstance();
        mobileScanDTO = MobileScanDTO.createDefaultScanInstance();
        ApplicationActions.createApplication(mobileApp, defaultTenantDTO, true);
        MobileScanActions.createMobileScan(mobileScanDTO, mobileApp, FodCustomTypes.SetupScanPageStatus.Scheduled);
        BrowserUtil.clearCookiesLogOff();

        LogInActions.adminLogIn().adminTopNavbar.openMobile().openDetailsFor(mobileApp.getApplicationName())
                .waitForMobiusSuccess();
        IssuesActions.addManualIssueExtendedAdmin(
                FodCustomTypes.ScanType.Mobile,
                mobileApp.getApplicationName(),
                "M10",
                dynamicAndMobileAppendString,
                FodCustomTypes.Severity.Critical,
                false);
        IssuesActions.addManualIssueExtendedAdmin(
                FodCustomTypes.ScanType.Mobile,
                mobileApp.getApplicationName(),
                "M13",
                dynamicAndMobileAppendString,
                FodCustomTypes.Severity.High,
                false);
        MobileScanActions.publishMobileScanWithoutImportFpr(mobileApp, false);
        BrowserUtil.clearCookiesLogOff();

        AllureReportUtil.info("Add Audit Filters to suppress one issue and change severity of another issue");
        var issuesPage = LogInActions.tamUserLogin(defaultTenantDTO).openYourApplications()
                .openDetailsFor(mobileApp.getApplicationName()).openIssues();
        issuesPage.clickCritical().openIssueByIndex(0).pressAddAuditFilter()
                .setSuppress()
                .pressCreateFilter()
                .pressClose();
        issuesPage.clickHigh().openIssueByIndex(0).pressAddAuditFilter()
                .setSeverity(FodCustomTypes.Severity.Medium)
                .pressCreateFilter()
                .pressClose();
        MobileScanActions.createMobileScan(mobileScanDTO, mobileApp, FodCustomTypes.SetupScanPageStatus.Scheduled);
        BrowserUtil.clearCookiesLogOff();
        MobileScanActions.publishMobileScanWithoutImportFpr(mobileApp, true);
        BrowserUtil.clearCookiesLogOff();

        LogInActions.tamUserLogin(defaultTenantDTO);
        verifyIssueCountersTenantOverviewPage(mobileApp, expectedMobileIssueCounters1);
        verifyIssueCountersTenantIssuesPage(mobileApp, expectedMobileIssueCounters2);
        verifyReport(mobileApp, "Ex…", expectedMobileIssueCounters2.getSum() + 2, "Mobile Issue Detail");
    }

    @MaxRetryCount(3)
    @Severity(SeverityLevel.NORMAL)
    @Description("Verify suppression,severity changes and counts in Release Issues Page/Application Overview Page for " +
            "Static Scans")
    @Test(groups = {"regression", "hf"})
    public void compareVulnerabilityCountOfStaticScans() {
        staticApp = ApplicationDTO.createDefaultInstance();
        staticScanDTO = StaticScanDTO.createDefaultInstance();
        staticScanDTO.setFileToUpload("payloads/fod/demo.zip");
        ApplicationActions.createApplication(staticApp, defaultTenantDTO, true);
        StaticScanActions.createStaticScan(staticScanDTO, staticApp, FodCustomTypes.SetupScanPageStatus.InProgress);
        BrowserUtil.clearCookiesLogOff();
        StaticScanActions.completeStaticScan(staticApp, true);
        BrowserUtil.clearCookiesLogOff();

        var issuesPage = LogInActions.tamUserLogin(defaultTenantDTO).openYourApplications()
                .openDetailsFor(staticApp.getApplicationName()).openIssues();
        issuesPage.clickHigh().openIssueByIndex(0).pressAddAuditFilter()
                .setSuppress()
                .pressCreateFilter()
                .pressClose();
        StaticScanActions.createStaticScan(staticScanDTO, staticApp, FodCustomTypes.SetupScanPageStatus.InProgress);
        BrowserUtil.clearCookiesLogOff();
        StaticScanActions.completeStaticScan(staticApp, true);
        BrowserUtil.clearCookiesLogOff();

        LogInActions.tamUserLogin(defaultTenantDTO);
        verifyIssueCountersTenantOverviewPage(staticApp, expectedStaticIssueCounters1);
        verifyIssueCountersTenantIssuesPage(staticApp, expectedStaticIssueCounters2);
        verifyReport(staticApp, "ST…", expectedStaticIssueCounters2.getSum(), "Static Issue Detail");
    }

    public void verifyIssueCountersTenantOverviewPage(ApplicationDTO applicationDTO, IssuesCounters issuesCounters) {
        AllureReportUtil.info("Verify Issue Counters in Application Overview Page");
        IssuesActions.validateApplicationIssuesTenant(issuesCounters, applicationDTO);
        AllureReportUtil.info("Verify Issue Counters in Release Overview Page");
        new TenantTopNavbar().openApplications().openYourReleases().openDetailsForRelease(applicationDTO);
        IssuesActions.validateOverviewIssuesTenant(issuesCounters);
    }

    public void verifyIssueCountersTenantIssuesPage(ApplicationDTO applicationDTO, IssuesCounters issuesCounters) {
        AllureReportUtil.info("Verify Issue Counters in Release Issues Page");
        var tenantReleaseIssuesPage = new TenantTopNavbar().openApplications().openYourReleases()
                .openDetailsForRelease(applicationDTO).openIssues();
        IssuesActions.validateIssuesTenant(issuesCounters);
        assertThat(tenantReleaseIssuesPage.getCriticalCount())
                .as("Suppressed issues should not be visible")
                .isEqualTo(issuesCounters.getCritical())
                .isZero();
        assertThat(tenantReleaseIssuesPage.getMediumCount())
                .as("Severity should be changed and should reflect in count")
                .isEqualTo(issuesCounters.getMedium());
        assertThat(tenantReleaseIssuesPage.getLowCount())
                .as("Severity should be changed and should reflect in count")
                .isEqualTo(issuesCounters.getLow());
    }

    @SneakyThrows
    public void verifyReport(ApplicationDTO applicationDTO, String searchText, int totalCount, String templateName) {
        AllureReportUtil.info("Verify total issues in reports");
        int totalIssues = 0;
        var report = ReportDTO.createInstance(applicationDTO, templateName);
        var reportsPage = ReportActions.createReport(report);
        PDF reportFile = new PDF(reportsPage.getReportByName(report.getReportName()).downloadReport("pdf"));
        var content = reportFile.text;
        Pattern p1 = Pattern.compile(String.format("%s[,\\s][\\w]+", searchText));
        Matcher m = p1.matcher(content);
        Pattern p2 = Pattern.compile("[,\\s]");
        while (m.find()) {
            String[] items = p2.split(m.group());
            int newIssue = Integer.parseInt(items[1]
                    .replaceAll("[^0-9]", ""));
            totalIssues = totalIssues + newIssue;
        }
        assertThat(totalIssues)
                .as("Total vulnerability count should be same as the count shown in application and release page")
                .isEqualTo(totalCount);
    }
}
