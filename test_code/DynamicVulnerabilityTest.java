package com.fortify.fod.ui.test.regression;

import com.fortify.common.utils.BrowserUtil;
import com.fortify.common.utils.WaitUtil;
import com.fortify.fod.common.config.FodConfig;
import com.fortify.fod.common.custom_types.FodCustomTypes;
import com.fortify.fod.common.elements.ModalDialog;
import com.fortify.fod.common.elements.Spinner;
import com.fortify.fod.common.entities.ApplicationDTO;
import com.fortify.fod.common.entities.MobileScanDTO;
import com.fortify.fod.exceptions.FodElementNotFoundException;
import com.fortify.fod.ui.pages.admin.AdminLoginPage;
import com.fortify.fod.ui.pages.admin.navigation.AdminTopNavbar;
import com.fortify.fod.ui.pages.tenant.navigation.TenantTopNavbar;
import com.fortify.fod.ui.test.FodBaseTest;
import com.fortify.fod.ui.test.actions.ApplicationActions;
import com.fortify.fod.ui.test.actions.LogInActions;
import com.fortify.fod.ui.test.actions.MobileScanActions;
import io.qameta.allure.Description;
import io.qameta.allure.Owner;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import lombok.extern.slf4j.Slf4j;
import org.testng.annotations.Test;
import utils.FodBacklogItem;
import utils.MaxRetryCount;
import utils.RetryAnalyzer;

import java.time.Duration;
import java.util.HashMap;
import java.util.Map;

import static com.codeborne.selenide.Selenide.refresh;
import static org.assertj.core.api.Assertions.assertThat;

@Owner("sbehera3@opentext.com")
@Slf4j
public class DynamicVulnerabilityTest extends FodBaseTest {

    ApplicationDTO applicationDTO;
    MobileScanDTO mobileScanDTO;
    String assessmentName = "Mobile+ Assessment";
    String fileName = "payloads/fod/iGoat.ipa";
    String scanFile = "payloads/fod/2107709.scan";
    HashMap<String, String> vulnIDs = new HashMap<>();


    @MaxRetryCount(3)
    @Severity(SeverityLevel.NORMAL)
    @Description("Enable Mobile+ Assessment type scan in tenant if not enabled")
    @Test(groups = {"hf", "regression"})
    public void validateMobilePlusAssessmentTypeTest() {
        var assessmentTypesPage = LogInActions.adminLogIn().adminTopNavbar.openTenants()
                .openTenantByName(defaultTenantDTO.getTenantCode())
                .openAssessmentTypes();
        assessmentTypesPage.selectAllowSingleScan(assessmentName);
        assessmentTypesPage.selectAllowSubscription(assessmentName);

    }

    @MaxRetryCount(3)
    @Severity(SeverityLevel.NORMAL)
    @Description("Create a mobile scan and import .scan file for Dynamic scan result")
    @Test(dependsOnMethods = {"validateMobilePlusAssessmentTypeTest"}, groups = {"hf", "regression"})
    public void prepareTestData() {
        applicationDTO = ApplicationDTO.createDefaultMobileInstance();
        mobileScanDTO = MobileScanDTO.createDefaultScanInstance();

        var mobileScanSetupPage = ApplicationActions.createApplication(applicationDTO, defaultTenantDTO, true)
                .pressStartMobileScan();
        mobileScanSetupPage.setAssessmentType(assessmentName)
                .setEntitlement(mobileScanDTO.getEntitlement())
                .setTimeZone(mobileScanDTO.getTimezone())
                .setFrameworkType("iOS")
                .setAuditPreference(mobileScanDTO.getAuditPreference().getTypeValue())
                .setAuthenticationRequired(mobileScanDTO.isAuthenticationRequired())
                .enableAccessToWebServices(true)
                .pressStartScanBtn()
                .pressNextButton()
                .uploadFile(fileName)
                .waitForStartButtonEnabled()
                .pressStartButton();
        mobileScanSetupPage.waitStatus(FodCustomTypes.SetupScanPageStatus.InProgress);
        BrowserUtil.clearCookiesLogOff();

        AdminLoginPage.navigate()
                .login(FodConfig.ADMIN_USER_NAME, FodConfig.ADMIN_PASSWORD);
        new AdminTopNavbar().openMobile()
                .openDetailsFor(applicationDTO.getApplicationName())
                .waitForMobiusStatus("Mobius Status - Import Succeeded");

        MobileScanActions.importMobileScanAdmin(applicationDTO.getApplicationName(),
                FodCustomTypes.ImportFprScanType.Dynamic,
                scanFile,
                true,
                false,
                false
        );
        MobileScanActions.completeMobileScan(applicationDTO, false);

    }

    @MaxRetryCount(3)
    @FodBacklogItem("753009")
    @FodBacklogItem("804017")
    @Severity(SeverityLevel.NORMAL)
    @Description("Add audit filter for Mobile and Dynamic vulnerability")
    @Test(groups = {"hf", "regression"}, dependsOnMethods = {"prepareTestData"})
    public void addAuditFilterTest() {

        vulnIDs.put("Dynamic", "en/calculators/");
        vulnIDs.put("Mobile", "hackerbox");
        var spinner = new Spinner();
        var issuesPage = LogInActions.tamUserLogin(defaultTenantDTO)
                .openYourReleases().openDetailsForRelease(applicationDTO).openIssues();

        for (Map.Entry<String, String> mapElement : vulnIDs.entrySet()) {

            String scanType = mapElement.getKey();
            String vulnID = mapElement.getValue();
            var issue = issuesPage.findWithSearchBox(vulnID).getAllIssues().get(0);
            var auditTemplatePopup = issue.pressAddAuditFilter()
                    .setSeverity(FodCustomTypes.Severity.Medium);
            auditTemplatePopup.pressCreateFilter().pressClose();
            spinner.waitTillLoading(2, true);
            var message = "The following filter(s) already exist in your application audit template.";
            WaitUtil.waitForTrue(() ->
                    issue.pressAddAuditFilter().getExistingAuditTemplateDetails()
                            .contains(message), Duration.ofMinutes(1), true);
            refresh();
            var existingAudit = issue.pressAddAuditFilter().getExistingAuditTemplateDetails();
            assertThat(existingAudit)
                    .as("Validate audit filter is created for " + scanType + " vulnerability")
                    .contains(message);
            assertThat(existingAudit)
                    .as("Validate audit filter change for " + scanType + " vulnerability")
                    .contains("Set Severity To Medium");
            new ModalDialog().pressClose();
        }

    }

    @MaxRetryCount(3)
    @Severity(SeverityLevel.NORMAL)
    @Description("On the same application and release, start another mobile scan and import the .scan file")
    @Test(dependsOnMethods = {"addAuditFilterTest"}, groups = {"hf", "regression"})
    public void createSecondMobileScanTest() {

        LogInActions.tamUserLogin(defaultTenantDTO);
        var mobileScanSetupPage = new TenantTopNavbar().openApplications().openYourReleases()
                .openDetailsForRelease(applicationDTO.getApplicationName(), applicationDTO.getReleaseName())
                .pressStartMobileScan();

        mobileScanSetupPage.setAssessmentType(assessmentName)
                .setEntitlement(mobileScanDTO.getEntitlement())
                .setTimeZone(mobileScanDTO.getTimezone())
                .setFrameworkType("iOS")
                .setAuditPreference(mobileScanDTO.getAuditPreference().getTypeValue())
                .setAuthenticationRequired(mobileScanDTO.isAuthenticationRequired())
                .enableAccessToWebServices(true)
                .pressStartScanBtn()
                .pressNextButton()
                .uploadFile(fileName)
                .waitForStartButtonEnabled()
                .pressStartButton();
        mobileScanSetupPage.waitStatus(FodCustomTypes.SetupScanPageStatus.InProgress);
        BrowserUtil.clearCookiesLogOff();

        AdminLoginPage.navigate()
                .login(FodConfig.ADMIN_USER_NAME, FodConfig.ADMIN_PASSWORD);
        new AdminTopNavbar().openMobile()
                .openDetailsFor(applicationDTO.getApplicationName())
                .waitForMobiusStatus("Mobius Status - Import Succeeded");

        MobileScanActions.importMobileScanAdmin(applicationDTO.getApplicationName(),
                FodCustomTypes.ImportFprScanType.Dynamic,
                scanFile,
                true,
                false,
                false
        );
        MobileScanActions.completeMobileScan(applicationDTO, true, false);

    }

    @MaxRetryCount(3)
    @Severity(SeverityLevel.NORMAL)
    @FodBacklogItem("550017")
    @Description("Application and Global Audit template not reflecting dynamic vulns from mobile scan")
    @Test(groups = {"hf", "regression"}, dependsOnMethods = {"createSecondMobileScanTest"})
    public void validateAddedAuditFilterTest() {
        var issuesPage = LogInActions.tamUserLogin(defaultTenantDTO)
                .openYourReleases().openDetailsForRelease(applicationDTO).openIssues();

        for (Map.Entry<String, String> mapElement : vulnIDs.entrySet()) {

            String scanType = mapElement.getKey();
            String vulnID = mapElement.getValue();

            var auditMessage = issuesPage.findWithSearchBox(vulnID).getAllIssues().get(0)
                    .openDetails().openHistory()
                    .getAllEvents().stream()
                    .filter(x -> x.contains("Application Audit Template"))
                    .findFirst()
                    .orElseThrow(() -> new FodElementNotFoundException("Application Audit template not found."));

            assertThat(auditMessage)
                    .as("Validate Application Audit Template")
                    .contains("Application Audit Template")
                    .as("Validate " + scanType
                            + " vulnerability has automatically changed based on the previous audit filter")
                    .contains("Changed Severity");

        }
    }
}
